{"body":"# MUnit\r\n\r\nModular unit testing for javascript. MUnit was built to easily handle synchronous\r\nand asynchronous tests easily with little developer intervention.\r\n\r\n\r\n### Installation\r\n\r\n```sh\r\n$ npm install munit\r\n```\r\n\r\n\r\n### Usage\r\n\r\n```js\r\nvar MUnit = require( 'munit' );\r\n\r\nMUnit.render( '/path/to/test/dir' );\r\n```\r\n\r\n\r\n### Example\r\n\r\n```js\r\n// file: test.js\r\nvar MUnit = require( 'munit' );\r\n\r\nMUnit( 'Sync', function( assert ) {\r\n\tassert.pass( 'sync-example' );\r\n\tassert.ok( 'boolean-test', true );\r\n});\r\n\r\nMUnit( 'Async', 2, function( assert ) {\r\n\tprocess.nextTick(function(){\r\n\t\tassert.equal( 'first-tick', 15.0, 15.0 );\r\n\t\tprocess.nextTick(function(){\r\n\t\t\tassert.pass( 'next-tick' );\r\n\t\t});\r\n\t});\r\n});\r\n\r\nMUnit.render();\r\n```\r\n\r\n\r\n```bash\r\n$ node test.js \r\n\r\nSync\r\nSync.sync-example\r\nSync.boolean-test\r\n\r\n-- All 2 tests passed on Sync --\r\n\r\n\r\nAsync\r\nAsync.first-tick\r\nAsync.next-tick\r\n\r\n-- All 2 tests passed on Async --\r\n\r\n\r\n\r\nTests Passed: 4\r\nTests Failed: 0\r\n```\r\n\r\n\r\n### Queue\r\n\r\nQueueing allows modules to not be triggered until they have a settings object to work with.\r\nThis settings object may get passed from module to module as needed.\r\n\r\n\r\n```js\r\n// file: queue.js\r\nvar MUnit = require( 'munit' );\r\n\r\n// Add queue object\r\nMUnit.Queue.add({ flag: true });\r\n\r\n// Sync waiter\r\nMUnit.Queue( 'Waiter1', function( settings, assert ) {\r\n\tassert.equal( 'flag', settings.flag, true );\r\n});\r\n\r\n// Asnyc Waiter\r\nMUnit.Queue( 'Waiter2', 1, function( settings, assert ) {\r\n\tprocess.nextTick(function(){\r\n\t\tassert.equal( 'flag', settings.flag, true );\r\n\t});\r\n});\r\n\r\nMUnit.render();\r\n```\r\n\r\n```bash\r\n$ node queue.js \r\n\r\nWaiter1\r\nWaiter1.flag\r\n\r\n-- All 1 tests passed on Waiter1 --\r\n\r\n\r\nWaiter2\r\nWaiter2.flag\r\n\r\n-- All 1 tests passed on Waiter2 --\r\n\r\n\r\n\r\nTests Passed: 2\r\nTests Failed: 0\r\n```\r\n\r\nMUnit also allows for more specific queuing for cases where there is only 1 resource, but multiple queue objects.\r\n\r\n```js\r\n// file: complex-queue.js\r\nvar MUnit = require( 'munit' );\r\n\r\n// Add queue object\r\nMUnit.Queue.add({ key1: 123 });\r\nMUnit.Queue.add({ key2: 456 });\r\n\r\n// Sync waiter\r\nMUnit.Queue( 'Waiter1', 'key1', function( settings, assert ) {\r\n\tassert.equal( 'key', settings.key1, 123 );\r\n});\r\n\r\n// Asnyc Waiter\r\nMUnit.Queue( 'Waiter2', 'key2', function( settings, assert ) {\r\n\tassert.equal( 'key', settings.key2, 456 );\r\n});\r\n\r\nMUnit.render();\r\n```\r\n\r\n```bash\r\n$ node complex-queue.js \r\n\r\nWaiter1\r\nWaiter1.key\r\n\r\n-- All 1 tests passed on Waiter1 --\r\n\r\n\r\nWaiter2\r\nWaiter2.key\r\n\r\n-- All 1 tests passed on Waiter2 --\r\n\r\n\r\n\r\nTests Passed: 2\r\nTests Failed: 0\r\n```\r\n\r\n\r\n### Options\r\n\r\nAll options inherit from parent modules, with the object passed into the module definition overwriting existing settings.\r\nAll options are optional, with preset defaults set in MUnit.Defaults.Settings.\r\n\r\n* **expect**: Number of expected tests to run. When less than 1, assumes synchronous module. Defaults to 0\r\n* **timeout**: Number of milliseconds to wait for a module to complete. Only used in asynchronous module. Defaults to 3 seconds.\r\n* **stopOnFail**: Exits the process when an error occurs. Defaults to false.\r\n* **autoQueue**: Auto adds the queue object back to the stack once the module has completed. Defaults to true.\r\n* **queue**: Defines module as a queue object. Set to true to take any object, or a string for specific object. Defaults to null.\r\n\r\n\r\n\r\n### Assert\r\n\r\nAssert objects are passed to each module for use with tests. There are a number of helper methods to make testing easier\r\n\r\n* **ok( name, bool [, startFunction, extra ] )**: Basic root boolean test. Marks test as passed or failed based on the boolean parameter.\r\n* **pass( name )**: Marks test as passed.\r\n* **fail( name )**: Marks test as failed.\r\n* **equal( name, actual, expected )**: Does strict comparison of actual to expected.\r\n* **deepEqual( name, actual, expect )**: Does deep object comparison of actual to expected. Uses nodes deepEqual internally.\r\n* **throws( name, [ error, ] block )**: Ensures block throws an error. Uses nodes throws internally.\r\n* **doesNotThrow( name, [ error, ] block )**: Ensures block does not throw an error. Uses nodes doesNotThrow iternally.\r\n\r\n\r\n\r\n## License\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2012 Corey Hart\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Modular unit testing with Javascript","google":"","name":"Munit"}